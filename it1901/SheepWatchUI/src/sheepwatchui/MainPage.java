package sheepwatchui;


import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.geom.Point2D;
import java.beans.PropertyVetoException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import models.EmergencyContact;
import models.Farmer;
import models.Report;
import models.Sheep;
import org.jdesktop.swingx.JXMapViewer;
import org.jdesktop.swingx.mapviewer.GeoPosition;
import org.jdesktop.swingx.mapviewer.Waypoint;
import org.jdesktop.swingx.mapviewer.WaypointPainter;


/**
 * The main application class containing the main GUI and 
 * functionality.
 */
public class MainPage extends javax.swing.JFrame {

    // The Farmer logged in to the system.
    private Farmer currentFarmer;
    private GeoPosition farmPos;
    private EmergencyContact currentEc;
    private DefaultListModel dlmSheepList = new DefaultListModel();
    private ArrayList<Sheep> alSheepList = new ArrayList<Sheep>();
    private DefaultTableModel dtmReportList = new DefaultTableModel();
    private DefaultTableModel dtmLogList = new DefaultTableModel();
    private Sheep selectedSheep;
    
    /**
     * Creates new form MainPage
     */
    public MainPage(Farmer farmer) {
        Runnable r = new Runnable(){
            public void run(){
                fetchScheduledSheepReports();
            }
        };
        new Thread(r).start();
        currentFarmer = farmer;
        currentEc = farmer.getEmergencyContact();
        //createManySheep();
        initComponents();
        fillSheepList();
        fillSheepMap();
        fillEditFarmerForm();
        // Get reports from the database
        updateReportTable(selectedSheep);
        // Get log reports from the database
        updateLogTable(selectedSheep);
        labUserName.setText("Du er logget inn som " + farmer.getName());
    }
    /**
     * Fetching report data from the database
     */
    private void fetchScheduledSheepReports(){
        int lastMinutes = -1;
        while(true){
           // Get time
           Date currentDateTime = Calendar.getInstance().getTime();
           int minutes = currentDateTime.getMinutes();
           int seconds = currentDateTime.getSeconds();
           // Updates the report table every hour
           if((minutes == 00) && (seconds == 00) && lastMinutes != minutes){
               // Makes sure it only happens once
               lastMinutes = minutes;
               // Get reports from the database
               updateReportTable(selectedSheep);
           }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupGender = new javax.swing.ButtonGroup();
        buttonGroupEditGender = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabMap = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        mapKit = new org.jdesktop.swingx.JXMapKit();
        mapKit.getMainMap().addMouseMotionListener(new MouseMotionListener() {
            public void mouseMoved(MouseEvent e) {}
            public void mouseDragged(MouseEvent e) {
                labSheepWP.setVisible(false);
                selectedSheep = null;
                updateReportTable(selectedSheep);
            }

        });

        mapKit.getMainMap().addMouseListener(new MouseListener() {
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}

            public void mouseClicked(MouseEvent e) {
                // Getting main map
                JXMapViewer map = mapKit.getMainMap();
                // Creating a label for name and id
                labSheepWP.setVisible(false);

                // Setting selected sheep to null
                selectedSheep = null;
                // Checks if the farmer clicked on a sheeps location
                for (int i = 0; i < alSheepList.size(); i++) {
                    Sheep s = alSheepList.get(i);
                    // Only adds sheeps with registered locations to the map.
                    if(s.getLocation().getLatitude() != 0 || s.getLocation().getLongitude() !=0){
                        // Convert sheep location to world bitmap
                        Point2D gp_pt = map.getTileFactory().geoToPixel(s.getLocation(), map.getZoom());
                        // Convert to screen point
                        Rectangle rect = map.getViewportBounds();
                        Point converted_gp_pt = new Point(((int)gp_pt.getX()-rect.x),
                            ((int)gp_pt.getY())-rect.y);
                        // Check if the click is close to a sheep
                        if(converted_gp_pt.distance(e.getPoint()) < 20) {
                            // Setting this sheep as selected
                            selectedSheep = s;
                            labSheepWP.setText(s.getId() + " - " + s.getName());
                            labSheepWP.setBounds(new Rectangle(converted_gp_pt, labSheepWP.getPreferredSize()));
                            labSheepWP.setVisible(true);
                            break;
                        }
                    }
                }
                updateReportTable(selectedSheep);
            }
        });
        labSheepWP = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblReports = new javax.swing.JTable();
        jLabel17 = new javax.swing.JLabel();
        btnUpdateReports = new javax.swing.JButton();
        tabRegisterEditSheep = new javax.swing.JPanel();
        registerSheepPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtWeight = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        rbMale = new javax.swing.JRadioButton();
        rbFemale = new javax.swing.JRadioButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtHealth = new javax.swing.JTextArea();
        labMessage = new javax.swing.JLabel();
        btnRegisterSheep = new javax.swing.JButton();
        dateBday = new com.michaelbaranov.microba.calendar.DatePicker();
        try{
            Date now = Calendar.getInstance().getTime();
            Date initBDayDate = new Date();
            initBDayDate.setDate(now.getDate());
            initBDayDate.setMonth(now.getMonth());
            initBDayDate.setYear(now.getYear());
            dateBday.setDate(initBDayDate);
        }catch(PropertyVetoException e){

        }
        jSeparator1 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstSheepList = new javax.swing.JList();
        jSeparator3 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtEditSheepId = new javax.swing.JTextField();
        txtEditSheepName = new javax.swing.JTextField();
        txtEditSheepWeight = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtEditSheepHealth = new javax.swing.JTextArea();
        labEditSheepMessage = new javax.swing.JLabel();
        btnEditSheepConfirm = new javax.swing.JButton();
        rbEditSheepMale = new javax.swing.JRadioButton();
        rbEditSheepFemale = new javax.swing.JRadioButton();
        dateEditSheepBday = new com.michaelbaranov.microba.calendar.DatePicker();
        labEditSheepDday = new javax.swing.JLabel();
        dateEditSheepDday = new com.michaelbaranov.microba.calendar.DatePicker();
        btnDeleteSheep = new javax.swing.JButton();
        tabEditFarmer = new javax.swing.JPanel();
        infoLabel1 = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        mailLabel = new javax.swing.JLabel();
        phoneLabel = new javax.swing.JLabel();
        addressLabel = new javax.swing.JLabel();
        postnrLabel = new javax.swing.JLabel();
        cityLabel = new javax.swing.JLabel();
        infoLabel2 = new javax.swing.JLabel();
        infoLabel3 = new javax.swing.JLabel();
        topSplit = new javax.swing.JSeparator();
        contactNameLabel = new javax.swing.JLabel();
        contactMailLabel = new javax.swing.JLabel();
        contactPhoneLabel = new javax.swing.JLabel();
        txtEditFarmerName = new javax.swing.JTextField();
        txtEditFarmerEmail = new javax.swing.JTextField();
        txtEditFarmerPhone = new javax.swing.JTextField();
        txtEditFarmerAddress = new javax.swing.JTextField();
        txtEditFarmerPostnr = new javax.swing.JTextField();
        txtEditFarmerCity = new javax.swing.JTextField();
        txtEditContactPhone = new javax.swing.JTextField();
        txtEditContactEmail = new javax.swing.JTextField();
        txtEditContactName = new javax.swing.JTextField();
        btnEditFarmerConfirm = new javax.swing.JButton();
        newPassLabel = new javax.swing.JLabel();
        newPassLabe2l = new javax.swing.JLabel();
        newPassField2 = new javax.swing.JLabel();
        txtEditFarmerNewpassword1 = new javax.swing.JPasswordField();
        txtEditFarmerNewpassword2 = new javax.swing.JPasswordField();
        txtEditFarmerOldPassword = new javax.swing.JPasswordField();
        labEditFarmerMessage = new javax.swing.JLabel();
        jSeparator5 = new javax.swing.JSeparator();
        mapKitEditFarm = new org.jdesktop.swingx.JXMapKit();
        // Create a set of waypoints
        Set<Waypoint> waypoints = new HashSet<Waypoint>();
        farmPos = currentFarmer.getFarmLocation();
        // Creating waypoint at location
        Waypoint wp = new SheepWaypoint(currentFarmer.getFarmLocation(), 1);
        waypoints.add(wp);
        // Getting main map
        JXMapViewer map = mapKitEditFarm.getMainMap();
        // Create a WaypointPainter to draw the points
        WaypointPainter painter = new WaypointPainter();
        SheepWaypointRenderer wpRenderer = new SheepWaypointRenderer();
        painter.setRenderer(wpRenderer);
        painter.setWaypoints(waypoints);
        map.setOverlayPainter(painter);

        mapKitEditFarm.getMainMap().addMouseListener(new MouseListener() {
            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}

            public void mouseClicked(MouseEvent e) {
                // Getting main map
                JXMapViewer map = mapKitEditFarm.getMainMap();
                // Clearing the waypoints
                // map.setOverlayPainter(null);

                // Create a set of waypoints
                Set<Waypoint> waypoints = new HashSet<Waypoint>();
                // Convert to screen point
                Rectangle rect = map.getViewportBounds();
                // Getting the screen point clicked
                Point clickedPoint = new Point(e.getPoint().x + rect.x, e.getPoint().y + rect.y);
                Point2D p2d = clickedPoint;
                // Converting to GeoLocation
                farmPos = map.getTileFactory().pixelToGeo(p2d, map.getZoom());

                // Creating waypoint at location
                Waypoint wp = new SheepWaypoint(farmPos, 1);
                waypoints.add(wp);

                // Create a WaypointPainter to draw the points
                WaypointPainter painter = new WaypointPainter();
                SheepWaypointRenderer ren = new SheepWaypointRenderer();
                painter.setRenderer(ren);
                painter.setWaypoints(waypoints);
                map.setOverlayPainter(painter);
            }
        });
        jLabel18 = new javax.swing.JLabel();
        tabLog = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblLog = new javax.swing.JTable();
        dateFrom = new com.michaelbaranov.microba.calendar.DatePicker();
        dateTo = new com.michaelbaranov.microba.calendar.DatePicker();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        lstLogSheepSelect = new javax.swing.JList();
        jLabel21 = new javax.swing.JLabel();
        btnRemoveSheepFilter = new javax.swing.JButton();
        mapKitLog = new org.jdesktop.swingx.JXMapKit();
        // Create a set of waypoints
        Set<Waypoint> waypointsLog = new HashSet<Waypoint>();
        // Creating waypoint at location
        Waypoint wpLog = new SheepWaypoint(currentFarmer.getFarmLocation(), 1);
        waypointsLog.add(wpLog);
        // Getting main map
        JXMapViewer mapLog = mapKitLog.getMainMap();
        // Create a WaypointPainter to draw the points
        WaypointPainter painterLog = new WaypointPainter();
        SheepWaypointRenderer wpRendererLog = new SheepWaypointRenderer();
        painterLog.setRenderer(wpRendererLog);
        painterLog.setWaypoints(waypointsLog);
        mapLog.setOverlayPainter(painterLog);
        labUserName = new javax.swing.JLabel();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SheepWatch");

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Kart over dine sauer");

        mapKit.setDefaultProvider(org.jdesktop.swingx.JXMapKit.DefaultProviders.OpenStreetMaps);
        mapKit.setMiniMapVisible(false);

        labSheepWP.setBackground(new java.awt.Color(255, 255, 255));
        labSheepWP.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        labSheepWP.setOpaque(true);

        tblReports.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tidspunkt", "ID", "Navn", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblReports.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tblReportsMousePressed(evt);
            }
        });
        jScrollPane4.setViewportView(tblReports);

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Nyeste rapporter fra hver sau");

        btnUpdateReports.setText("Oppdater sauerapporter");
        btnUpdateReports.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateReportsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabMapLayout = new javax.swing.GroupLayout(tabMap);
        tabMap.setLayout(tabMapLayout);
        tabMapLayout.setHorizontalGroup(
            tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mapKit, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(labSheepWP))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(btnUpdateReports)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(180, Short.MAX_VALUE))
        );
        tabMapLayout.setVerticalGroup(
            tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabMapLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 416, Short.MAX_VALUE)
                    .addComponent(mapKit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12)
                .addGroup(tabMapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labSheepWP)
                    .addComponent(btnUpdateReports))
                .addContainerGap(150, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Kartoversikt", tabMap);

        registerSheepPanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        registerSheepPanel.setForeground(new java.awt.Color(255, 0, 0));

        jLabel2.setText("Vennligst skriv inn registreringsinformasjonen for sauen.");

        jLabel3.setText("Navn:");

        jLabel4.setText("Vekt:");

        jLabel5.setText("Kjønn:");

        buttonGroupGender.add(rbMale);
        rbMale.setText("Vær");
        rbMale.setName("rbMale"); // NOI18N

        buttonGroupGender.add(rbFemale);
        rbFemale.setText("Søye");
        rbFemale.setName("rbFemale"); // NOI18N

        jLabel6.setText("Fødselsdato:");

        jLabel7.setText("Helse:");

        txtHealth.setColumns(20);
        txtHealth.setRows(5);
        jScrollPane1.setViewportView(txtHealth);

        btnRegisterSheep.setText("Bekreft registrering");
        btnRegisterSheep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegisterSheepActionPerformed(evt);
            }
        });

        try {
            dateBday.setDate(new java.util.Date(1383576560000L));
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        javax.swing.GroupLayout registerSheepPanelLayout = new javax.swing.GroupLayout(registerSheepPanel);
        registerSheepPanel.setLayout(registerSheepPanelLayout);
        registerSheepPanelLayout.setHorizontalGroup(
            registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerSheepPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(registerSheepPanelLayout.createSequentialGroup()
                        .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(registerSheepPanelLayout.createSequentialGroup()
                                .addComponent(rbMale, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rbFemale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dateBday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(registerSheepPanelLayout.createSequentialGroup()
                        .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtName)
                            .addComponent(txtWeight)))
                    .addComponent(labMessage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, registerSheepPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRegisterSheep)))
                .addContainerGap())
        );
        registerSheepPanelLayout.setVerticalGroup(
            registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(registerSheepPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(rbMale)
                    .addComponent(rbFemale))
                .addGap(18, 18, 18)
                .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateBday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(registerSheepPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRegisterSheep)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jLabel8.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        jLabel8.setText("Mine sauer");

        lstSheepList.setModel(dlmSheepList);
        lstSheepList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstSheepListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(lstSheepList);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setText("Informasjon om valgt sau.");

        jLabel10.setText("Id:");

        jLabel11.setText("Navn:");

        jLabel12.setText("Vekt:");

        jLabel13.setText("Kjønn:");

        jLabel14.setText("Fødselsdato:");

        jLabel16.setText("Helse:");

        txtEditSheepId.setEditable(false);

        txtEditSheepHealth.setColumns(20);
        txtEditSheepHealth.setRows(5);
        jScrollPane3.setViewportView(txtEditSheepHealth);

        btnEditSheepConfirm.setText("Bekreft redigering");
        btnEditSheepConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditSheepConfirmActionPerformed(evt);
            }
        });

        buttonGroupEditGender.add(rbEditSheepMale);
        rbEditSheepMale.setText("Vær");

        buttonGroupEditGender.add(rbEditSheepFemale);
        rbEditSheepFemale.setText("Søye");

        labEditSheepDday.setText("Dødsdato:");

        dateEditSheepDday.setFieldEditable(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(labEditSheepDday, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel16, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.LEADING))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(btnEditSheepConfirm)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addComponent(rbEditSheepMale, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGap(131, 131, 131))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtEditSheepId, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                            .addComponent(txtEditSheepName, javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtEditSheepWeight, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(rbEditSheepFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(dateEditSheepBday, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                                            .addComponent(dateEditSheepDday, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                    .addComponent(labEditSheepMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 107, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtEditSheepId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(txtEditSheepName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(txtEditSheepWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(rbEditSheepMale)
                    .addComponent(rbEditSheepFemale))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateEditSheepBday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dateEditSheepDday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labEditSheepDday, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel16))
                .addGap(18, 18, 18)
                .addComponent(labEditSheepMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnEditSheepConfirm)
                .addContainerGap())
        );

        btnDeleteSheep.setText("Slett sau");
        btnDeleteSheep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteSheepActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabRegisterEditSheepLayout = new javax.swing.GroupLayout(tabRegisterEditSheep);
        tabRegisterEditSheep.setLayout(tabRegisterEditSheepLayout);
        tabRegisterEditSheepLayout.setHorizontalGroup(
            tabRegisterEditSheepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabRegisterEditSheepLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(registerSheepPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabRegisterEditSheepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabRegisterEditSheepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                    .addComponent(btnDeleteSheep))
                .addGap(18, 18, 18)
                .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        tabRegisterEditSheepLayout.setVerticalGroup(
            tabRegisterEditSheepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addComponent(jSeparator3)
            .addGroup(tabRegisterEditSheepLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabRegisterEditSheepLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabRegisterEditSheepLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDeleteSheep))
                    .addComponent(registerSheepPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(98, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Legg til og rediger sauer", tabRegisterEditSheep);

        infoLabel1.setText("Vennligst fyll ut de feltene du vil forandre på, og bekreft med passord.");

        nameLabel.setText("Navn:");

        mailLabel.setText("E-Post:");

        phoneLabel.setText("Telefonnummer:");

        addressLabel.setText("Adresse:");

        postnrLabel.setText("Postnummer:");

        cityLabel.setText("Poststed:");

        infoLabel2.setText("Personlig informasjon:");

        infoLabel3.setText("Nødkontakt:");

        contactNameLabel.setText("Navn:");

        contactMailLabel.setText("E-Post:");

        contactPhoneLabel.setText("Telefonnummer:");

        btnEditFarmerConfirm.setText("Bekreft endringer");
        btnEditFarmerConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditFarmerConfirmActionPerformed(evt);
            }
        });

        newPassLabel.setText("Nytt passord:");

        newPassLabe2l.setText("Gjenta passord:");

        newPassField2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        newPassField2.setText("Gammelt passord:");

        mapKitEditFarm.setDefaultProvider(org.jdesktop.swingx.JXMapKit.DefaultProviders.OpenStreetMaps);
        mapKitEditFarm.setMiniMapVisible(false);

        jLabel18.setText("Endre plassering av bondegård:");

        javax.swing.GroupLayout tabEditFarmerLayout = new javax.swing.GroupLayout(tabEditFarmer);
        tabEditFarmer.setLayout(tabEditFarmerLayout);
        tabEditFarmerLayout.setHorizontalGroup(
            tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabEditFarmerLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                            .addComponent(cityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(txtEditFarmerCity, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabEditFarmerLayout.createSequentialGroup()
                                            .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(newPassField2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                                .addComponent(newPassLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(newPassLabe2l, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtEditFarmerNewpassword1)
                                                        .addComponent(txtEditFarmerNewpassword2)))
                                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabEditFarmerLayout.createSequentialGroup()
                                                    .addGap(4, 4, 4)
                                                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(btnEditFarmerConfirm, javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(txtEditFarmerOldPassword, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                                        .addComponent(labEditFarmerMessage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                                    .addGap(61, 61, 61))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, tabEditFarmerLayout.createSequentialGroup()
                                    .addComponent(infoLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(mailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(phoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE)
                                        .addComponent(addressLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(postnrLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEditFarmerPostnr, javax.swing.GroupLayout.DEFAULT_SIZE, 250, Short.MAX_VALUE)
                                            .addComponent(txtEditFarmerAddress))
                                        .addComponent(txtEditFarmerPhone, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(txtEditFarmerEmail)
                                    .addComponent(txtEditFarmerName))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                .addComponent(infoLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap(494, Short.MAX_VALUE))
                            .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                        .addComponent(contactNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(txtEditContactName, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE))
                                    .addComponent(jLabel18)
                                    .addComponent(mapKitEditFarm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(contactMailLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(contactPhoneLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                                        .addGap(4, 4, 4)
                                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtEditContactEmail, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                                            .addComponent(txtEditContactPhone))))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(infoLabel1)
                                .addComponent(topSplit))
                            .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 809, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(148, Short.MAX_VALUE))))
        );
        tabEditFarmerLayout.setVerticalGroup(
            tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabEditFarmerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(topSplit, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(infoLabel2)
                    .addComponent(infoLabel3))
                .addGap(4, 4, 4)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLabel)
                    .addComponent(contactNameLabel)
                    .addComponent(txtEditFarmerName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtEditContactName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(contactMailLabel)
                            .addComponent(txtEditContactEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabEditFarmerLayout.createSequentialGroup()
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(mailLabel)
                            .addComponent(txtEditFarmerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)))
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(contactPhoneLabel)
                        .addComponent(txtEditContactPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(phoneLabel)
                        .addComponent(txtEditFarmerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addressLabel)
                            .addComponent(txtEditFarmerAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabEditFarmerLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(8, 8, 8)))
                .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabEditFarmerLayout.createSequentialGroup()
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(postnrLabel)
                            .addComponent(txtEditFarmerPostnr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cityLabel)
                            .addComponent(txtEditFarmerCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPassLabel)
                            .addComponent(txtEditFarmerNewpassword1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPassLabe2l)
                            .addComponent(txtEditFarmerNewpassword2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(tabEditFarmerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(newPassField2)
                            .addComponent(txtEditFarmerOldPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(labEditFarmerMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnEditFarmerConfirm))
                    .addComponent(mapKitEditFarm, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(53, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Rediger bonde og nødkontakt", tabEditFarmer);

        tblLog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Tidspunkt", "ID", "Navn", "Lengdegrad", "Breddegrad", "Puls", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class, java.lang.Integer.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tblLog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblLogMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(tblLog);

        try {
            dateFrom.setDate(new java.util.Date(1383433200000L));
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        dateFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateFromActionPerformed(evt);
            }
        });

        try {
            dateTo.setDate(Calendar.getInstance().getTime());
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }
        dateTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateToActionPerformed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel19.setText("Etter dato:");

        jLabel20.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel20.setText("Før dato:");

        lstLogSheepSelect.setModel(dlmSheepList);
        lstLogSheepSelect.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                lstLogSheepSelectValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(lstLogSheepSelect);

        jLabel21.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel21.setText("Filtrer på sau:");

        btnRemoveSheepFilter.setText("Fjern filtrering på sau");
        btnRemoveSheepFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveSheepFilterActionPerformed(evt);
            }
        });

        mapKitLog.setDefaultProvider(org.jdesktop.swingx.JXMapKit.DefaultProviders.OpenStreetMaps);
        mapKitLog.setMiniMapVisible(false);

        javax.swing.GroupLayout tabLogLayout = new javax.swing.GroupLayout(tabLog);
        tabLog.setLayout(tabLogLayout);
        tabLogLayout.setHorizontalGroup(
            tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabLogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabLogLayout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(mapKitLog, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE))
                    .addGroup(tabLogLayout.createSequentialGroup()
                        .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(tabLogLayout.createSequentialGroup()
                                    .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(tabLogLayout.createSequentialGroup()
                                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel21)
                            .addGroup(tabLogLayout.createSequentialGroup()
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnRemoveSheepFilter)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        tabLogLayout.setVerticalGroup(
            tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tabLogLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 165, Short.MAX_VALUE)
                    .addGroup(tabLogLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnRemoveSheepFilter)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dateFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabLogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(mapKitLog, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Logg", tabLog);

        labUserName.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N

        btnLogout.setText("Logg ut");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1000, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 888, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnLogout)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 664, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labUserName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogout, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        new Login().setVisible(true);
        setVisible(false);
        dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    private void btnRegisterSheepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegisterSheepActionPerformed
        String name = "";
        double weight = 0;
        char gender = 0;
        String bDay = "";
        String health = "";
        
        boolean isValidForm = true;
        
        // Resets the info label
        labMessage.setText("");
        
        name = txtName.getText();
        // Testing if weight is a double value
        try{
            weight = Double.parseDouble(txtWeight.getText());
        }catch(NumberFormatException nfe){
            labMessage.setText("Du mÃ¥ skrive en gyldig vekt!");
            isValidForm = false;
        }
        
        // Checks which gender is chosen
        if(rbMale.isSelected()){
            gender = 'm';
        }else if(rbFemale.isSelected()){
            gender = 'f';
        }else{
            labMessage.setText("Du mÃ¥ velge et kjÃ¸nn!");
            isValidForm = false;
        }
        // Getting date
        Date d = dateBday.getDate();
        if(ValidationHelper.isValidDate(d)){
            bDay = d.getDate()+"."+(d.getMonth()+1)+"."+(d.getYear()+1900);
        }else{
            labMessage.setText("Du kan ikke velge en fremtidig dato!");
            isValidForm = false;
        }
        health = txtHealth.getText();
        
        // Checks if all the fields are filled out
        if(txtName.getText().length()>0 && txtWeight.getText().length() > 0 
                && txtHealth.getText().length()>0){
            // If the schema is valid, add the sheep.
            if(isValidForm){
                Sheep sheep = new Sheep(currentFarmer, name, bDay, gender, health, weight);
                
                // Adding the sheep to the database
                DBConnector.addSheep(sheep);
                labMessage.setText("Registrering av sau var vellykket!");
                labMessage.setForeground(java.awt.Color.BLUE);
    
                // Updating the sheep list
                fillSheepList();
                
                // Clearing all the text fields
                txtName.setText("");
                txtWeight.setText("");
                txtHealth.setText("");
                rbFemale.setSelected(false);
                rbMale.setSelected(false);
            }
        }else{
            labMessage.setText("Du mÃ¥ fylle ut alle feltene!");
            labMessage.setForeground(java.awt.Color.RED);
        }
        
    }//GEN-LAST:event_btnRegisterSheepActionPerformed

    private void lstSheepListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstSheepListValueChanged
        if(lstSheepList.getSelectedValue() != null){
            Sheep markedSheep = (Sheep)lstSheepList.getSelectedValue();
            txtEditSheepId.setText(markedSheep.getId()+"");
            txtEditSheepName.setText(markedSheep.getName());
            txtEditSheepWeight.setText(markedSheep.getWeight()+"");
            try {
                // Setting the birthday
                dateEditSheepBday.setDate(stringToDate(markedSheep.getDateOfBirth()));
                // Setting the death day
                if(markedSheep.getDateOfDeath() == null){
                    dateEditSheepDday.setVisible(false);
                    labEditSheepDday.setVisible(false);
                }else{
                    dateEditSheepDday.setDate(stringToDate(markedSheep.getDateOfDeath()));
                    dateEditSheepDday.setVisible(true);
                    labEditSheepDday.setVisible(true);
                }
            } catch (PropertyVetoException ex) {
                ex.printStackTrace();
            }

            if(markedSheep.getGender() == 'm'){
                rbEditSheepMale.setSelected(true);
            }else if(markedSheep.getGender() == 'f'){
                rbEditSheepFemale.setSelected(true);
            }
            
            txtEditSheepHealth.setText(markedSheep.getHealth());
        }
    }//GEN-LAST:event_lstSheepListValueChanged

    private void btnEditSheepConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditSheepConfirmActionPerformed
        String name = "";
        double weight = 0;
        char gender = 0;
        String bDay = "";
        String dDay = "";
        String health = "";
        boolean isValidForm = true;
        int id = -1;
        try{
            id = Integer.parseInt(txtEditSheepId.getText());
        }catch(NumberFormatException e){
            isValidForm = false;
        }
        
        
        // Resets the info label
        labEditSheepMessage.setText("");
        
        name = txtEditSheepName.getText();
        // Testing if weight is a double value
        try{
            weight = Double.parseDouble(txtEditSheepWeight.getText());
        }catch(NumberFormatException nfe){
            labEditSheepMessage.setText("Du mÃ¥ skrive en gyldig vekt!");
            isValidForm = false;
        }
        
        // Checks which gender is chosen
        if(rbEditSheepMale.isSelected()){
            gender = 'm';
        }else if(rbEditSheepFemale.isSelected()){
            gender = 'f';
        }else{
            labEditSheepMessage.setText("Du mÃ¥ velge et kjÃ¸nn!");
            isValidForm = false;
        }
        // Getting date of birth
        if(ValidationHelper.isValidDate(dateEditSheepBday.getDate())){
            bDay = dateEditSheepBday.getDate().getDate()
                    +"."+(dateEditSheepBday.getDate().getMonth()+1)
                    +"."+(dateEditSheepBday.getDate().getYear()+1900);
        }else{
            labEditSheepMessage.setText("Du kan ikke velge en fremtidig dato!");
            isValidForm = false;
        }
        
        // Getting date of death (if one exists)
        if(dateEditSheepDday.isVisible()){
            dDay = dateEditSheepDday.getDate().getDate()
                    +"."+dateEditSheepDday.getDate().getMonth()
                    +"."+dateEditSheepDday.getDate().getYear();
        }else{
            dDay = null;
        }
        
        health = txtEditSheepHealth.getText();
        
        // Checks if all the fields are filled out
        if(txtEditSheepName.getText().length()>0 && txtEditSheepWeight.getText().length() > 0 
                && txtEditSheepHealth.getText().length()>0){
            // If the schema is valid, add the sheep.
            if(isValidForm){
                Sheep sheep = new Sheep(id, currentFarmer, name, bDay, null, 
                        dDay, gender, health, weight);
                
                // Adding the sheep to the database
                DBConnector.editSheep(sheep);
                labEditSheepMessage.setText("Redigering av sau var vellykket!");
                labEditSheepMessage.setForeground(java.awt.Color.BLUE);
                
                // Updating the sheep list
                fillSheepList();
            }
        }else{
            labEditSheepMessage.setText("Du mÃ¥ fylle ut alle feltene!");
            labEditSheepMessage.setForeground(java.awt.Color.RED);
        }
        
    }//GEN-LAST:event_btnEditSheepConfirmActionPerformed

    private void btnEditFarmerConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditFarmerConfirmActionPerformed
        String name = "";
        String email = "";
        String password = "";
        String phone = "";
        String address = "";
        String postnr = "";
        String city = "";
        String ecName = "";
        String ecPhone = "";
        String ecEmail = "";

        boolean validForm = true;

        // Resets the info field
        labEditFarmerMessage.setText("");

        /*
         * Checks that the user has written something in all the fields.
         * Writes an error message if one or more fields are empty.
        */
        try{
            name = txtEditFarmerName.getText();
            // Checks email
            if(ValidationHelper.checkEmail(txtEditFarmerEmail.getText())){
                email = txtEditFarmerEmail.getText();
            }else{
                labEditFarmerMessage.setText("Bonde mÃ¥ ha en gyldig e-postadresse!");
                labEditFarmerMessage.setForeground(java.awt.Color.RED);
                validForm = false;
            }
            
            // If the user is changing his password
            if(txtEditFarmerNewpassword1.getText().length() > 0
                    || txtEditFarmerNewpassword2.getText().length() > 0){
                // Checks if the passwords are equal
                if(txtEditFarmerNewpassword1.getText().equals(txtEditFarmerNewpassword2.getText())){
                    // Checks if the user has entered his correct old password
                    if(txtEditFarmerOldPassword.getText().equals(currentFarmer.getPassword())){
                        password = txtEditFarmerNewpassword1.getText();
                    }else{
                        labEditFarmerMessage.setText("Du har skrevet feil passord!");
                        labEditFarmerMessage.setForeground(java.awt.Color.RED);
                        validForm = false;
                    }
                }else{
                    labEditFarmerMessage.setText("Du mÃ¥ skrive to like passord!");
                    labEditFarmerMessage.setForeground(java.awt.Color.RED);
                    validForm = false;
                }
            }else{
                // Checks if the user has entered his correct old password
                if(txtEditFarmerOldPassword.getText().equals(currentFarmer.getPassword())){
                    password = txtEditFarmerOldPassword.getText();
                }else{
                    labEditFarmerMessage.setText("Du har skrevet feil passord!");
                    labEditFarmerMessage.setForeground(java.awt.Color.RED);
                    validForm = false;
                }
            }
            // Checks if the phone number is valid
            if(ValidationHelper.checkPhoneNumber(txtEditFarmerPhone.getText())){
                phone = txtEditFarmerPhone.getText();
            }else{
                labEditFarmerMessage.setText("Bonde mÃ¥ ha et gyldig telefonnummer!");
                labEditFarmerMessage.setForeground(java.awt.Color.RED);
                validForm = false;
            }
            address = txtEditFarmerAddress.getText();
            // Checks if the postnr is valid
            if(ValidationHelper.checkPostnr(txtEditFarmerPostnr.getText())){
                postnr = txtEditFarmerPostnr.getText();
            }else{
                labEditFarmerMessage.setText("Bonde mÃ¥ ha gyldig postnummer!");
                labEditFarmerMessage.setForeground(java.awt.Color.RED);
                validForm = false;
            }
            city = txtEditFarmerCity.getText();
            ecName = txtEditContactName.getText();
            // Checks if the email is valid
            if(ValidationHelper.checkEmail(txtEditContactEmail.getText())){
                ecEmail = txtEditContactEmail.getText();
            }else{
                labEditFarmerMessage.setText("NÃ¸dkontakt mÃ¥ ha en gyldig e-postadresse!");
                labEditFarmerMessage.setForeground(java.awt.Color.RED);
                validForm = false;
            }
            // Checks if the phone number is valid
            if(ValidationHelper.checkPhoneNumber(txtEditContactPhone.getText())){
                ecPhone = txtEditContactPhone.getText();
            }else{
                labEditFarmerMessage.setText("NÃ¸dkontakt mÃ¥ ha gyldig telefonnr!");
                labEditFarmerMessage.setForeground(java.awt.Color.RED);
                validForm = false;
            }
        }catch(NullPointerException npe){
            labEditFarmerMessage.setText("Du mÃ¥ fylle ut alle feltene! Exception");
            labEditFarmerMessage.setForeground(java.awt.Color.RED);
            validForm = false;
        }
        // Checks if the user has actually written something in every required field.
        if(txtEditFarmerName.getText().length()>0 
            && txtEditFarmerEmail.getText().length()>0
            && txtEditFarmerOldPassword.getText().length()>0 
            && txtEditFarmerPhone.getText().length()>0
            && txtEditFarmerAddress.getText().length()>0 
            && txtEditFarmerPostnr.getText().length()>0
            && txtEditFarmerCity.getText().length()>0 
            && txtEditContactName.getText().length()>0
            && txtEditContactEmail.getText().length()>0 
            && txtEditContactPhone.getText().length()>0){
            if(validForm){
                // Creating the EmergencyContact object
                EmergencyContact ec = new EmergencyContact(ecName, ecEmail, ecPhone);
                // Creating the Farmer object
                Farmer farmer = new Farmer(name, email, phone, ec, address, 
                        postnr, city, farmPos, password);
                // Adding the farmer to the database
                DBConnector.editFarmerAndEC(farmer, currentFarmer);
                // Updating the current farmer
                currentFarmer = farmer;
                labUserName.setText("Du er logget inn som " + currentFarmer.getName());
                
                // Oppdater forsidekart
                mapKit.setCenterPosition(currentFarmer.getFarmLocation());
                
                labEditFarmerMessage.setText("Redigering vellykket!");
                labEditFarmerMessage.setForeground(java.awt.Color.BLUE);
                // Updates the sheep map on the front page
                fillSheepMap();
                // Updates the log map
            }
        }else{
            labEditFarmerMessage.setText("Du mÃ¥ fylle ut alle feltene! "
                    + "Husk ogsÃ¥ passordbekreftelse.");
            labEditFarmerMessage.setForeground(java.awt.Color.RED);
        }
        txtEditFarmerNewpassword1.setText("");
        txtEditFarmerNewpassword2.setText("");
        txtEditFarmerOldPassword.setText("");
    }//GEN-LAST:event_btnEditFarmerConfirmActionPerformed

    private void btnUpdateReportsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateReportsActionPerformed
        updateReportTable(null);
    }//GEN-LAST:event_btnUpdateReportsActionPerformed

    private void tblReportsMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblReportsMousePressed
        // Getting the selected row of the table
        int selectedRow = tblReports.getSelectedRow();
        // Getting the name of the selected sheep
        String name = (String)dtmReportList.getValueAt(selectedRow, 2);
        // Finds the selected sheep object and prints the label at its location
        for (int i = 0; i < alSheepList.size(); i++) {
            Sheep s = alSheepList.get(i);
            if(s.getName().equals(name)){
                JXMapViewer map = mapKit.getMainMap();
                map.setCenterPosition(s.getLocation());
                // Convert sheep location to world bitmap
                Point2D gp_pt = map.getTileFactory().geoToPixel(s.getLocation(), map.getZoom());
                // Convert to screen point
                Rectangle rect = map.getViewportBounds();
                Point converted_gp_pt = new Point(((int)gp_pt.getX()-rect.x),
                                                  ((int)gp_pt.getY())-rect.y);
                // Adding label
                labSheepWP.setText(s.getId() + " - " + s.getName());
                labSheepWP.setBounds(new Rectangle(converted_gp_pt, labSheepWP.getPreferredSize()));
                labSheepWP.setVisible(true);
            }
        }
    }//GEN-LAST:event_tblReportsMousePressed

    private void dateFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateFromActionPerformed
        updateLogTable(selectedSheep);
    }//GEN-LAST:event_dateFromActionPerformed

    private void dateToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateToActionPerformed
        updateLogTable(selectedSheep);
    }//GEN-LAST:event_dateToActionPerformed

    private void lstLogSheepSelectValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_lstLogSheepSelectValueChanged
        if(lstLogSheepSelect.getSelectedValue() != null){
            selectedSheep = (Sheep)lstLogSheepSelect.getSelectedValue();
            updateLogTable(selectedSheep);
        }
    }//GEN-LAST:event_lstLogSheepSelectValueChanged

    private void btnRemoveSheepFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveSheepFilterActionPerformed
        lstLogSheepSelect.clearSelection();
        selectedSheep = null;
        updateLogTable(null);
    }//GEN-LAST:event_btnRemoveSheepFilterActionPerformed

    private void btnDeleteSheepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteSheepActionPerformed
        // Delete the selected sheep from the database
        if(lstSheepList.getSelectedValue() != null){
            int reply = JOptionPane.showConfirmDialog(
                    null, 
                    "Er du sikker pÃ¥ at du vil slette sauen?", 
                    "Bekreft sletting", 
                    JOptionPane.YES_NO_OPTION);
            if(reply == JOptionPane.YES_OPTION){
                DBConnector.deleteSheep(alSheepList.get(lstSheepList.getSelectedIndex()));
                // Updates the lists
                fillSheepList();
                // Updates the map
                fillSheepMap();
                // Clearing all the input fields
                txtEditSheepName.setText("");
                txtEditSheepWeight.setText("");
                txtEditSheepHealth.setText("");
                rbEditSheepFemale.setSelected(false);
                rbEditSheepMale.setSelected(false);
            }
        }
    }//GEN-LAST:event_btnDeleteSheepActionPerformed

    private void tblLogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblLogMouseClicked
        int logID = tblLog.getSelectedRow();
        if(logID >= 0){
            // Create a set of waypoints
            Set<Waypoint> waypoints = new HashSet<Waypoint>();

            // Add barn to waypoints
            Waypoint w = new SheepWaypoint(currentFarmer.getFarmLocation(), 1);
            waypoints.add(w);
            // Get location for this log post
            GeoPosition gp = new GeoPosition(
                    (double)tblLog.getValueAt(logID, 3), 
                    (double)tblLog.getValueAt(logID, 4));
            // Check if it is under attack
            int wpCode;
            if(tblLog.getValueAt(logID, 6).equals("Under angrep!")){
                wpCode = 2;
            } else if(tblLog.getValueAt(logID, 6).equals("Død")){
                wpCode = 3;
            } else{
                wpCode = 0;
            }
            
            // Add sheep to waypoints
            Waypoint wp = new SheepWaypoint(gp, wpCode);
            waypoints.add(wp);
            
            mapKitLog.setCenterPosition(gp);
            mapKitLog.setZoom(5);
           
            // Create a WaypointPainter to draw the points
            WaypointPainter painter = new WaypointPainter();
            SheepWaypointRenderer renderer = new SheepWaypointRenderer();
            painter.setRenderer(renderer);
            painter.setWaypoints(waypoints);
            mapKitLog.getMainMap().setOverlayPainter(painter);
            
        }
    }//GEN-LAST:event_tblLogMouseClicked

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new MainPage().setVisible(true);
            }
        });
    }
    
    /**
     * Fills the list of {@link Sheep} belonging to the {@link Farmer}.
     */
    private void fillSheepList(){
        dlmSheepList = new DefaultListModel();
        
        alSheepList = DBConnector.getSheepList(currentFarmer);
        if(alSheepList.size()>0){
            for (int i = 0; i < alSheepList.size(); i++) {
                dlmSheepList.addElement(alSheepList.get(i));
            }
        }
        lstSheepList.setModel(dlmSheepList);
        lstLogSheepSelect.setModel(dlmSheepList);
    }
    /**
     * Fills out the form in Edit Farmer and Emergency Contact tab.
     */
    private void  fillEditFarmerForm(){
        txtEditFarmerEmail.setText(currentFarmer.getEmail());
        txtEditFarmerAddress.setText(currentFarmer.getAddress());
        txtEditFarmerCity.setText(currentFarmer.getCity());
        txtEditFarmerName.setText(currentFarmer.getName());
        txtEditFarmerPhone.setText(currentFarmer.getPhone());
        txtEditFarmerPostnr.setText(currentFarmer.getPostnr());
        txtEditContactEmail.setText(currentEc.getEmail());
        txtEditContactName.setText(currentEc.getName());
        txtEditContactPhone.setText(currentEc.getPhone());
    }
    /**
     * Fills the map up with waypoints showing this {@link Farmer} 's {@link Sheep} location.
     */
    private void fillSheepMap(){
        // Adding sheep label to the map
        labSheepWP.setVisible(false);
        mapKit.getMainMap().setLayout(null);
        mapKit.getMainMap().add(labSheepWP);
        // Setting center position for edit farm map
        mapKitEditFarm.getMainMap().setCenterPosition(currentFarmer.getFarmLocation());
        mapKitEditFarm.getMainMap().setZoom(5);
        // Setting center position for log map
        mapKitLog.getMainMap().setCenterPosition(currentFarmer.getFarmLocation());
        mapKitLog.getMainMap().setZoom(5);
        
        // Setting farm location for log map
        
        // Create a set of waypoints
        Set<Waypoint> waypointsLog = new HashSet<Waypoint>();
        // Creating waypoint at location
        Waypoint wpLog = new SheepWaypoint(currentFarmer.getFarmLocation(), 1);
        waypointsLog.add(wpLog);
        // Getting main map
        JXMapViewer mapLog = mapKitLog.getMainMap();
        // Create a WaypointPainter to draw the points
        WaypointPainter painterLog = new WaypointPainter();
        SheepWaypointRenderer wpRendererLog = new SheepWaypointRenderer();
        painterLog.setRenderer(wpRendererLog);
        painterLog.setWaypoints(waypointsLog);
        mapLog.setOverlayPainter(painterLog);

        // Create a set of waypoints
        Set<Waypoint> waypoints = new HashSet<Waypoint>();
        ArrayList<Report> alNewReports = 
                DBConnector.getNewestReports(currentFarmer, null);
        // Add barn to waypoints
        Waypoint w = new SheepWaypoint(currentFarmer.getFarmLocation(), 1);
        waypoints.add(w);
        
        for (int i = 0; i < alNewReports.size(); i++) {
            Report r = alNewReports.get(i);
            // Checks if a location has been set for the sheep
            if(r.getSheepLocation().getLatitude() !=0 ||
                    r.getSheepLocation().getLongitude() != 0){
                // Check if it is under attack, dead or OK
                int wpCode;
                if(r.getHeartRate() > 85){
                    wpCode = 2;
                }else if(r.getHeartRate() < 5){
                    wpCode = 3;
                }else{
                    wpCode = 0;
                }
                Waypoint wp = new SheepWaypoint(r.getSheepLocation(), wpCode);
                waypoints.add(wp);
            }
        }
        mapKit.setCenterPosition(currentFarmer.getFarmLocation());
        mapKit.setZoom(5);

        // Create a WaypointPainter to draw the points
        WaypointPainter painter = new WaypointPainter();
        SheepWaypointRenderer renderer = new SheepWaypointRenderer();
        painter.setRenderer(renderer);
        painter.setWaypoints(waypoints);
        mapKit.getMainMap().setOverlayPainter(painter);
    }
    
    /**
     * Updates the report table with all the {@link Sheep} reports, or just the reports
     * from the given {@link Sheep} parameter.
     * @param s the {@link Sheep} to show reports from. null to show all the {@link Sheep} reports.
     */
    private void updateReportTable(Sheep s){
        // Creating the table model for the table
        dtmReportList = (DefaultTableModel)tblReports.getModel();
        // Resizing the time column
        tblReports.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblReports.getColumnModel().getColumn(0).setPreferredWidth(135);
        tblReports.getColumnModel().getColumn(1).setPreferredWidth(30);
        tblReports.getColumnModel().getColumn(2).setPreferredWidth(91);
        tblReports.getColumnModel().getColumn(3).setPreferredWidth(90);
        
        
        // Removing all old rows from the table
        int rows = dtmReportList.getRowCount();
        for (int i = rows-1; i >=0; i--) {
            dtmReportList.removeRow(i);
        }
        
        // Getting the reports from the database
        ArrayList<Report> alReports = DBConnector.getNewestReports(
                currentFarmer, s);
        selectedSheep = null;
        
        // Sort all attacks on the top
        for (int i = 0; i < alReports.size(); i++) {
            Report report = alReports.get(i);
            if(report.getHeartRate() > 85){
                alReports.remove(i);
                alReports.add(0,report);
            }
        }
        // Adds all reports to the list
        for (int i = 0; i < alReports.size(); i++) {
            Report r = alReports.get(i);
            String status;
            if(r.getHeartRate() > 85){
                status = "Under angrep!";
            }else if(r.getHeartRate() < 5){
                status = "Død";
            }else{
                status = "Ok";
            }
            
            Object[] reportRow = {
                r.getTime(), 
                r.getSheep().getId(), 
                r.getSheep().getName(), 
                status};
            dtmReportList.addRow(reportRow);
        }
    }
    
    /**
     * Updates the report log table with all the {@link Sheep} reports between the 
     * specified dates, or just the reports from the given {@link Sheep} parameter.
     * If no dates are specified, all the rports will be displayed.
     * @param s the {@link Sheep} to show reports from. null to show all the {@link Sheep} reports.
     */
    private void updateLogTable(Sheep s){
        // Creating the table model for the table
        dtmLogList = (DefaultTableModel)tblLog.getModel();
        tblLog.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        tblLog.getColumnModel().getColumn(0).setPreferredWidth(135);
        tblLog.getColumnModel().getColumn(1).setPreferredWidth(22);
        tblLog.getColumnModel().getColumn(2).setPreferredWidth(70);
        tblLog.getColumnModel().getColumn(3).setPreferredWidth(77);
        tblLog.getColumnModel().getColumn(4).setPreferredWidth(75);
        tblLog.getColumnModel().getColumn(5).setPreferredWidth(35);
        tblLog.getColumnModel().getColumn(6).setPreferredWidth(100);

        // Removing all old rows from the table
        int rows = dtmLogList.getRowCount();
        for (int i = rows-1; i >=0; i--) {
            dtmLogList.removeRow(i);
        }
        
        // Getting the reports from the database
        ArrayList<Report> alReports = DBConnector.getReportList(currentFarmer, 
                s);

        selectedSheep = null;
        
        // Adds all reports to the list
        for (int i = 0; i < alReports.size(); i++) {
            Report r = alReports.get(i);
            String status = "";
            if(r.getHeartRate() > 85){
                status = "Under angrep!";
            }else if(r.getHeartRate() < 5){
                status = "Død";
            }else{
                status = "Ok";
            }
            Object[] reportRow = {
                r.getTime(), 
                r.getSheep().getId(), 
                r.getSheep().getName(), 
                r.getSheepLocation().getLatitude(), 
                r.getSheepLocation().getLongitude(), 
                r.getHeartRate(), 
                status};
            dtmLogList.addRow(reportRow);
        }
        // Filter the table with date restrictions
        filterLog();
    }
    
    /**
     * Filter the log table so that only posts within the selected
     * dates are displayed.
     */
    private void filterLog() {
        TableModel tmLog = tblLog.getModel();
        TableRowSorter trsLogSorter = new TableRowSorter(tmLog);

        trsLogSorter.setSortable(0, false);
        trsLogSorter.setSortable(1, false);
        trsLogSorter.setSortable(2, false);
        trsLogSorter.setSortable(3, false);
        trsLogSorter.setSortable(4, false);
        trsLogSorter.setSortable(5, false);
        trsLogSorter.setSortable(6, false);
        
        ArrayList<RowFilter<Object, Object>> filters = new ArrayList<>();
        filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.AFTER,
                dateFrom.getDate()));
        filters.add(RowFilter.dateFilter(RowFilter.ComparisonType.BEFORE,
                dateTo.getDate()));
        trsLogSorter.setRowFilter(RowFilter.andFilter(filters));
        tblLog.setModel(tmLog);
        tblLog.setRowSorter(trsLogSorter);
    }
    
    /*private void createManySheep(){
        for (int i = 300; i < 10000; i++) {
            Sheep s = new Sheep(i, currentFarmer, "Test", "30.03.1991", farmPos, null, 'm', "OK", 60);
            Report r = new Report(s, currentFarmer.getFarmLocation(), 60);
            DBConnector.addSheep(s);
            DBConnector.addReport(r);
        }
    }*/
    /**
     * Displays the given {@link Sheep} location on the map.
     * @param s {@link Sheep} to be displayed.
     *
    private void setMap(Sheep s){
        jepMap.setText("<font face='Arial'>" + 
                "<img src='http://maps.googleapis.com/maps/api/staticmap?"
                + "center="+s.getLocation().getLatitude()+","+s.getLocation().getLongitude()+"&zoom=13&size="+jepMap.getWidth()+"x"+
                jepMap.getHeight()+"&markers=%"+adresse+"|"+resturant+"&sensor=true'/>" + 
                "</font>");
    }
    */
    /**
     * Converts a string in (dd.mm.yyyy) to a @Date object.
     * @param s
     * @return the Date object
     */
    private Date stringToDate(String s){
        Date date = new Date();
        String dateString = "";
        int count = 0;
        for (int i = 0; i < s.length(); i++) {
            if(s.charAt(i) == '.'){
                 if(count == 0){
                    date.setDate(Integer.parseInt(dateString));
                    count++;
                }else if(count == 1){
                    date.setMonth(Integer.parseInt(dateString)-1);
                    count++;
                }
                dateString = "";
            }else if(i == (s.length()-1)){
                dateString += s.charAt(i);
                date.setYear(Integer.parseInt(dateString)-1900);
            }else{
                dateString += s.charAt(i);
            }
        }
        return date;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel addressLabel;
    private javax.swing.JButton btnDeleteSheep;
    private javax.swing.JButton btnEditFarmerConfirm;
    private javax.swing.JButton btnEditSheepConfirm;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnRegisterSheep;
    private javax.swing.JButton btnRemoveSheepFilter;
    private javax.swing.JButton btnUpdateReports;
    private javax.swing.ButtonGroup buttonGroupEditGender;
    private javax.swing.ButtonGroup buttonGroupGender;
    private javax.swing.JLabel cityLabel;
    private javax.swing.JLabel contactMailLabel;
    private javax.swing.JLabel contactNameLabel;
    private javax.swing.JLabel contactPhoneLabel;
    private com.michaelbaranov.microba.calendar.DatePicker dateBday;
    private com.michaelbaranov.microba.calendar.DatePicker dateEditSheepBday;
    private com.michaelbaranov.microba.calendar.DatePicker dateEditSheepDday;
    private com.michaelbaranov.microba.calendar.DatePicker dateFrom;
    private com.michaelbaranov.microba.calendar.DatePicker dateTo;
    private javax.swing.JLabel infoLabel1;
    private javax.swing.JLabel infoLabel2;
    private javax.swing.JLabel infoLabel3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel labEditFarmerMessage;
    private javax.swing.JLabel labEditSheepDday;
    private javax.swing.JLabel labEditSheepMessage;
    private javax.swing.JLabel labMessage;
    private javax.swing.JLabel labSheepWP;
    private javax.swing.JLabel labUserName;
    private javax.swing.JList lstLogSheepSelect;
    private javax.swing.JList lstSheepList;
    private javax.swing.JLabel mailLabel;
    private org.jdesktop.swingx.JXMapKit mapKit;
    private org.jdesktop.swingx.JXMapKit mapKitEditFarm;
    private org.jdesktop.swingx.JXMapKit mapKitLog;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JLabel newPassField2;
    private javax.swing.JLabel newPassLabe2l;
    private javax.swing.JLabel newPassLabel;
    private javax.swing.JLabel phoneLabel;
    private javax.swing.JLabel postnrLabel;
    private javax.swing.JRadioButton rbEditSheepFemale;
    private javax.swing.JRadioButton rbEditSheepMale;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JPanel registerSheepPanel;
    private javax.swing.JPanel tabEditFarmer;
    private javax.swing.JPanel tabLog;
    private javax.swing.JPanel tabMap;
    private javax.swing.JPanel tabRegisterEditSheep;
    private javax.swing.JTable tblLog;
    private javax.swing.JTable tblReports;
    private javax.swing.JSeparator topSplit;
    private javax.swing.JTextField txtEditContactEmail;
    private javax.swing.JTextField txtEditContactName;
    private javax.swing.JTextField txtEditContactPhone;
    private javax.swing.JTextField txtEditFarmerAddress;
    private javax.swing.JTextField txtEditFarmerCity;
    private javax.swing.JTextField txtEditFarmerEmail;
    private javax.swing.JTextField txtEditFarmerName;
    private javax.swing.JPasswordField txtEditFarmerNewpassword1;
    private javax.swing.JPasswordField txtEditFarmerNewpassword2;
    private javax.swing.JPasswordField txtEditFarmerOldPassword;
    private javax.swing.JTextField txtEditFarmerPhone;
    private javax.swing.JTextField txtEditFarmerPostnr;
    private javax.swing.JTextArea txtEditSheepHealth;
    private javax.swing.JTextField txtEditSheepId;
    private javax.swing.JTextField txtEditSheepName;
    private javax.swing.JTextField txtEditSheepWeight;
    private javax.swing.JTextArea txtHealth;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtWeight;
    // End of variables declaration//GEN-END:variables
}
